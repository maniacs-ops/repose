buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-vagrant-plugin:2.0'
    }
}


import com.bmuschko.gradle.vagrant.tasks.VagrantDestroy
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh
import com.bmuschko.gradle.vagrant.tasks.VagrantUp

apply plugin: 'com.bmuschko.vagrant-base'

File debBoxDir = file("$buildDir/deb")
File rpmBoxDir = file("$buildDir/rpm")
String configDir = project.hasProperty('config-dir') ? project.property('config-dir') : "$projectDir/src/config"

vagrant {
    environmentVariables {
        variable 'REPOSE_VERSION', project.hasProperty('release-version') ? project.property('release-version') : 'default'
    }
}

task copyDebFiles() {
    inputs.files(file("$projectDir/src/vagrant/deb"),
                 file("$projectDir/src/vagrant/scripts"),
                 file("$projectDir/src/vagrant/fake-services"),
                 file(configDir))
    outputs.dir debBoxDir

    doLast {
        //make the deb directory
        debBoxDir.mkdirs()

        //copy the vagrant file
        copy {
            from "$projectDir/src/vagrant/deb"
            into debBoxDir
        }

        //copy the scripts
        copy {
            from "$projectDir/src/vagrant/scripts"
            into "$debBoxDir/scripts"
        }

        //copy the fake services
        copy {
            from "$projectDir/src/vagrant/fake-services"
            into "$debBoxDir/fake-services"
        }

        //copy the configs
        copy {
            from configDir
            into "$debBoxDir/etc_repose"
        }
    }
}

task vagrantUpDeb(type: VagrantUp) {
    dependsOn 'copyDebFiles'

    boxDir = debBoxDir
}

task vagrantUpSmokeTestDeb(type: VagrantUp) {
    dependsOn 'copyDebFiles'
    finalizedBy 'vagrantDestroyDeb'

    boxDir = debBoxDir
}

task vagrantSshSmokeTestDeb(type: VagrantSsh) {
    dependsOn 'vagrantUpSmokeTestDeb'
    finalizedBy 'vagrantDestroyDeb'

    boxDir = debBoxDir
    sshCommand "sh /vagrant/scripts/isReposeReady.sh"
}

task vagrantDestroyDeb(type: VagrantDestroy) {
    boxDir = debBoxDir
}

task copyRpmFiles() {
    inputs.files(file("$projectDir/src/vagrant/rpm"),
            file("$projectDir/src/vagrant/scripts"),
            file("$projectDir/src/vagrant/fake-services"),
            file(configDir))
    outputs.dir rpmBoxDir

    doLast {
        //make the rpm directory
        rpmBoxDir.mkdirs()

        //copy the vagrant file
        copy {
            from "$projectDir/src/vagrant/rpm"
            into rpmBoxDir
        }

        //copy the scripts
        copy {
            from "$projectDir/src/vagrant/scripts"
            into "$rpmBoxDir/scripts"
        }

        //copy the fake services
        copy {
            from "$projectDir/src/vagrant/fake-services"
            into "$rpmBoxDir/fake-services"
        }

        //copy the configs
        copy {
            from configDir
            into "$rpmBoxDir/etc_repose"
        }
    }
}

task vagrantUpRpm(type: VagrantUp) {
    dependsOn 'copyRpmFiles'

    boxDir = rpmBoxDir
}

task vagrantUpSmokeTestRpm(type: VagrantUp) {
    dependsOn 'copyRpmFiles'
    finalizedBy 'vagrantDestroyRpm'

    boxDir = rpmBoxDir
}

task vagrantSshSmokeTestRpm(type: VagrantSsh) {
    dependsOn 'vagrantUpSmokeTestRpm'
    finalizedBy 'vagrantDestroyRpm'

    boxDir = debBoxDir
    sshCommand "sh /vagrant/scripts/isReposeReady.sh"
}

task vagrantDestroyRpm(type: VagrantDestroy) {
    boxDir = rpmBoxDir
}

task('smokeTest', description: 'tests if the Repose instance can handle basic requests', group: 'release', dependsOn: ['vagrantSshSmokeTestDeb', 'vagrantSshSmokeTestRpm'])

// Note: At this time, release verification will be handled out-of-band with the release. Therefore,
//       no wiring was added to place the 'smokeTest' task into existing task flows.
